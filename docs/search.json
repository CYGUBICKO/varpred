[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Bicko Cygu Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/varpred_intro.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Outcome plots","text":"development package motivated water, sanitation, hygiene (WaSH) data interested investigating contribution demographic socio-economic factors improved WaSH indicators among slum dwellers Nairobi, Kenya. noticed predictions generated using existing packages consistently - - estimated observed proportions; align well observed data points. words, call bias. several (challenges) reasons , including: choice reference point uncertainty estimation – choice anchor computing confidence intervals biases induced non-linear averaging due non-linear transformation generalized linear models","code":""},{"path":"/articles/varpred_intro.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Outcome plots","text":"outcome plot (often called effect prediction plot), plots focal predictor x-axis central estimate (predicted values) y-axis. resulting plot provide useful way summarize results regression model; depend deal challenges.","code":""},{"path":"/articles/varpred_intro.html","id":"mean-based-approach","dir":"Articles","previous_headings":"Introduction","what":"Mean-based approach","title":"Outcome plots","text":"model non-focal predictors multivariate models, reference points (values chosen non-focal predictors) can chosen average non-focal linear predictor variables (columns model matrix corresponding non-focal predictors) – call approach mean-based reference point currently implemented commonly used R software . illustrate , use datasets::mtcars dataset fit two models: 1) one without interaction, 2) one interaction predictors. consider wt focal predictor, remaining (disp hp) non-focal predictors. use varpred, emmeans Effects comparison. vapred package: bias.adjust=\"none\": generate mean-based three packages different ways generating values focal predictor. comparison, use quantile generate focal values. Unless want compare values, necessary. emmeans package: Effects package: can use varpred::combinevarpred combine compared estimates: attrvpred: converts emmeans effects objects varpred varpred::getmeans: calculates marginal means estimates compare data mean (mean observed data) plot compares central estimates (trend lines), together mean (horizontal lines) data mean (mean mpg) observed data (grey points).  absence interaction (left Figure), three packages produce identical estimates respective averages closely match data mean. However, presence interactions, estimates emmeans effects identical differ varpred’s, close data mean. packages emmeans effects use average input variables (mean disp hp) reference point opposed model-center approach varpred (average linear predictor variables). simple model (left Figure ) input variables linear predictor variables, three methods produce identical results. interaction model (right Figure ), additional linear predictor variable (disp*hp). emmeans effects first average input variables compute \\(\\mathrm{\\bar{disp}}\\star\\mathrm{\\bar{hp}}\\) varpred first calculates corresponding vector linear predictor values averages.","code":"df <- datasets::mtcars  ## No interaction model mod1 <- lm(mpg ~ wt + disp + hp, df)  ## Model with interaction mod2 <- lm(mpg ~ wt + disp*hp, df) library(varpred) varpredtheme()  ## generate values for focal predictor steps <- 500 quant <- seq(0, 1, length.out=steps) wt_values <- quantile(df$wt, quant, names=FALSE) |> unique()  ## No interaction vpred1 <- varpred(mod=mod1     , focal_predictors=\"wt\"     , at=list(wt=wt_values)     , bias.adjust=\"none\"     , modelname=\"varpred: no interaction\" )  ## With interaction vpred2 <- varpred(mod=mod2     , focal_predictors=\"wt\"     , at=list(wt=wt_values)     , bias.adjust=\"none\"     , modelname=\"varpred: with interaction\" ) names_use <- vpred2 |> head() |> colnames() library(emmeans) em1 <- emmeans(mod1     , specs=~wt     , at=list(wt=wt_values) ) em1 <- em1 |> data.frame() em1$model <- \"emmeans: no interaction\" em1$df <- NULL colnames(em1) <- names_use  em2 <- emmeans(mod2     , specs=~wt     , at=list(wt=wt_values) ) em2 <- em2 |> data.frame() em2$model <- \"emmeans: with interaction\" em2$df <- NULL colnames(em2) <- names_use library(effects) #> Loading required package: carData #> lattice theme set by effectsTheme() #> See ?effectsTheme for details. ef1 <- Effect(\"wt\"     , mod1     , xlevels=list(wt=wt_values) ) ef1 <- ef1 |> data.frame() ef1$model <- \"effects: no interaction\" colnames(ef1) <- names_use  ef2 <- Effect(\"wt\"     , mod2     , xlevels=list(wt=wt_values) ) ef2 <- ef2 |> data.frame() ef2$model <- \"effects: with interaction\" colnames(ef2) <- names_use library(ggplot2) ## Combine emmeans, effects and varpred objects ## and convert all to varpred objects for ploting attrvpred <- function(obj) {     if (!inherits(obj, \"varpred\")) {         temp_obj <- list()         obj$method <- gsub(\".*\\\\: \", \"\", obj$model)         obj$model <- gsub(\"\\\\:.*\", \"\", obj$model)         temp_obj$preds <- obj         class(temp_obj) <- \"varpred\"         return(temp_obj)     } else {         obj$preds$method <- gsub(\".*\\\\: \", \"\", obj$preds$model)         obj$preds$model <- gsub(\"\\\\:.*\", \"\", obj$preds$model)         return(obj)     } } all_preds <- lapply(list(vpred1, vpred2, em1, em2, ef1, ef2), attrvpred)  ## Compute marginal means: mean of the estimates all_means <- lapply(all_preds, function(x){     model <- x$preds$model[[1]]     method <- x$preds$method[[1]]     m <- getmeans(x, focal=\"wt\", modelname=model)     m$method <- method     return(m) }) all_means <- do.call(\"rbind\", all_means)  ## Data mean df_mean <- data.frame(mpg=mean(df$mpg)     , model=\"data mean\" )  ## Plot all the estimates p1 <- (combinevarpred(all_preds, plotit=TRUE, ci=FALSE)     + geom_point(data=df, aes(x=wt, y=mpg), col=\"grey\")     + geom_hline(data=df_mean, aes(yintercept=mpg, color=model, linetype=model))      + geom_hline(data=all_means, aes(yintercept=fit, colour=model, linetype=model))     + facet_wrap(~method) ) print(p1)"},{"path":"/articles/varpred_intro.html","id":"prediction-and-effect-plots","dir":"Articles","previous_headings":"Introduction","what":"Prediction and effect plots","title":"Outcome plots","text":"major distinction two lies describe uncertainty around central estimates (trend lines previous Figures). prediction plot captures sources uncertainty, including intercept, non-focal predictors random effects. hand, effect plot takes account uncertainty associated focal predictor . way, expect effect plot narrower confidence intervals (CIs) prediction plot. easy generate effect plots emmeans effects. possible way achieve emmeans effects use zeroed-(see varpred::zero_vcov) covariance matrix, works input variables centered prior model fitting, case numerical variables, complicated input variables categorical. varpred, generate effect plot, set isolate=TRUE (default), otherwise (isolate=FALSE) prediction plot. consider vpred1 generated , effect plot, now generate prediction model (mod1).  Figure shows prediction (-styled) effect (-styled) plot. horizontal line mean data (mean mpg) vertical one mean focal predictor (wt) – call center point. wider curves correspond conventional prediction curves (prediction-styled plot), narrower curves crossing center point. simple linear model, effect-styled curves cross center point. words, effects-styled plots provide way generate effects indicating uncertainty due changes focal predictor.","code":"## prediction-styled plot: set isolate=FALSE vpred1_pred <- varpred(mod=mod1     , focal_predictors=\"wt\"     , isolate=FALSE     , at=list(wt=wt_values)     , bias.adjust=\"none\"     , modelname=\"prediction\" )  ## Rename vpred1 vpred1$preds$model <- \"effects\"  p2 <- (list(vpred1, vpred1_pred)     |> combinevarpred(plotit=TRUE)     + geom_hline(data=df_mean, aes(yintercept=mpg, color=model, linetype=model))      + geom_vline(xintercept=mean(wt_values), lty=2) ) print(p2)"},{"path":"/articles/varpred_intro.html","id":"anchor","dir":"Articles","previous_headings":"Introduction","what":"Anchor","title":"Outcome plots","text":"generate effect-styled plot, need value focal predictor compute CIs. call anchor. anchor choice affect central estimate, prediction-style plot. default value center point linear predictor variables corresponding focal predictor. example, previous Figure, mean wt used default choice. particularly important want show effect particular value focal predictor mean (center point). example, \\(0\\), minimum focal predictor, etc. implement varpred, set anchor value using isolate.value isolate must TRUE.","code":"## Min of wt anchor0 <- varpred(mod1     , \"wt\"     , isolate=TRUE     , isolate.value=min(df$wt) # min anchor     , modelname=\"min\" )  ## mean-anchored (default) anchor0.5 <- varpred(mod1     , \"wt\"     , isolate=TRUE     , modelname=\"mean\" )  p3 <- (list(anchor0, anchor0.5)     |> combinevarpred() # No plot     |> plot()     + labs(colour=\"Anchor\", linetype=\"Anchor\") ) print(p3)"},{"path":"/articles/varpred_intro.html","id":"observed-value-approach","dir":"Articles","previous_headings":"Introduction","what":"Observed-value approach","title":"Outcome plots","text":"linear model, averaging done linear scale, .e., linear averaging. result, model-center estimates (made using mean-based approach) unbiased. However, model non-linear link function, usually true. averaging done separate link scale, mean estimates estimate mean point. leads bias: case systematic difference values seen average given value focal predictor value predicted mean-based approach. alternative mean-based reference point observed-value-based approach, involves computing prediction population non-focal predictors averaging across values focal predictor. implement observed-value-based varpred, set bias.adjust=\"observed\".","code":"## mean-based: set bias.adjust=\"none\" vpred_mean <- varpred(mod1, \"wt\", bias.adjust=\"none\", modelname=\"mean-based\")  ## observed-value: set bias.adjust=\"observed\" vpred_observed <- varpred(mod1, \"wt\", bias.adjust=\"observed\", modelname=\"observed-value\")  p4 <- (list(vpred_mean, vpred_observed)     |> combinevarpred(plotit=TRUE)     + labs(colour=\"Approach\", linetype=\"Approach\") ) print(p4)"},{"path":"/articles/varpred_intro.html","id":"bias-correction","dir":"Articles","previous_headings":"Introduction > Observed-value approach","what":"Bias correction","title":"Outcome plots","text":"simple linear model, mod1, averaging done linear scale, hence effect non-linear averaging. Consequently, estimates similar, shown previous Figure. However, model non-linear link function generalized models, usually true. demonstrate , simulate binary outcome two predictors shown . write simple function add binned observations, .e., proportion observed outcomes falling within particular bin: combine varpred objects add observed values (binned).  difference mean-based observed-value-based due bias induced non-focal predictor non-linear averaging logistic model. mean-based approach affected non-linear averaging. result, observed-value approach estimates aligned observed data mean-based approach, see previous Figure.","code":"set.seed(911) # Simulate binary outcome data with two predictors steps <- 500 N <- 1000 b0 <- 2 b_age <- -1.5 b_income <- 1.8 min_age <- 18 age <- min_age + rnorm(N, 0, 1) min_income <- 15 income <- min_income + rnorm(N, 0, 1) eta <- b0 + age*b_age + income*b_income status <- rbinom(N, 1, plogis(eta)) df <- data.frame(status, age, income)  # Fit model mod <- glm(status ~ age + income, df, family=binomial())  # Effect plots ## Mean-based ef_mean <- varpred(mod, \"age\", steps=steps, bias.adjust=\"none\", modelname=\"mean-based\") ## Observed-value-based ef_observed <- varpred(mod, \"age\", steps=steps, bias.adjust=\"observed\", modelname=\"observed-value\") ## Generate binned observations ### mod: data.frame or mod object (df preferable) binfun <- function(mod, focal, bins=50, groups=NULL) {     require(dplyr, quietly=TRUE, warn.conflicts=FALSE)     if (!is.null(groups)) {         bins_all <- c(groups, \"bin\")     } else {         bins_all <- \"bin\"     }     if (!inherits(mod, \"data.frame\")) {         mf <- model.frame(mod)     } else {         mf <- mod     }     N <- NROW(mf)     check_df <- (mf         |> arrange_at(focal)         |> mutate(bin=ceiling(row_number()*bins/N))         |> group_by_at(bins_all)         |> summarise_all(mean)         |> mutate(model=\"binned\")     )     return(check_df) }  binned_df <- binfun(mod, \"age\", bins=50) head(binned_df) #> # A tibble: 6 × 5 #>     bin status   age income model  #>   <dbl>  <dbl> <dbl>  <dbl> <chr>  #> 1     1   1     15.6   15.0 binned #> 2     2   1     16.1   15.4 binned #> 3     3   0.95  16.4   14.8 binned #> 4     4   1     16.6   15.1 binned #> 5     5   1     16.7   15.1 binned #> 6     6   0.9   16.8   15.0 binned ## Combine all the effect estimates ef <- (list(ef_mean, ef_observed)     |> combinevarpred(plotit=TRUE)     + geom_point(data=binned_df, aes(x=age, y=status), colour=\"grey\") ) plot(ef)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bicko Cygu. Author, maintainer. Ben Bolker. Author. Jonathan Dushoff. Author. John Fox. Copyright holder.            matrix..df get_model_matrix functions implementation copied package effects","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cygu B, Bolker B, Dushoff J (2022). varpred: Outcome Plots. R package version 1.0.1.","code":"@Manual{,   title = {varpred: Outcome Plots},   author = {Bicko Cygu and Ben Bolker and Jonathan Dushoff},   year = {2022},   note = {R package version 1.0.1}, }"},{"path":"/index.html","id":"varpred","dir":"","previous_headings":"","what":"Outcome Plots","title":"Outcome Plots","text":"development package motivated water, sanitation, hygiene (WaSH) data interested investigating contribution demographic socio-economic factors improved WaSH indicators among slum dwellers Nairobi, Kenya. noticed predictions generated using existing packages consistently - - estimated observed proportions; align well observed data points. words, call . several (challenges) reasons , including: choice uncertainty estimation – choice computing confidence intervals biases induced non-linear averaging due non-linear transformation generalized linear models implements two approaches constructing outcome plots (prediction effect plots). include: mean-based approach observed-value approach can also used generate bias-corrected prediction effect estimates generalized linear models involving non-linear link functions, including models random effects. package complements existing ones providing: straightforward way generate effects plots robust way correct non-linear averaging bias generalized (mixed) models","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Outcome Plots","text":"can install development version varpred GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"CYGUBICKO/varpred\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Outcome Plots","text":"use mtcars data show outcome plots: isolate=TRUE generate effect plot isolate=FALSE generate prediction plot","code":"library(varpred) library(ggplot2)  ## Set theme for plots varpredtheme()  ## Fit the model mod <- lm(mpg ~ wt + hp, mtcars)  ## Effect ef <- varpred(mod, \"wt\", isolate=TRUE, modelname=\"effect\") plot(ef) ## Prediction pred <- varpred(mod, \"wt\", isolate=FALSE, modelname=\"prediction\") plot(pred) ## Compare effect and prediction all_v <- combinevarpred(list(ef, pred)) p1 <- plot(all_v)  ## Add observed data print(p1     + geom_point(data=mtcars, aes(x=wt, y=mpg), col=\"grey\")     + labs(colour=\"Method\", linetype=\"Method\") )"},{"path":"/reference/as.data.frame.varpred.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce varpred object to as.data.frame — as.data.frame.varpred","title":"Coerce varpred object to as.data.frame — as.data.frame.varpred","text":"Coerce varpred object .data.frame","code":""},{"path":"/reference/as.data.frame.varpred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce varpred object to as.data.frame — as.data.frame.varpred","text":"","code":"# S3 method for varpred as.data.frame(x, ...)"},{"path":"/reference/as.data.frame.varpred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce varpred object to as.data.frame — as.data.frame.varpred","text":"x varpred object. ... additional aurguments passed .data.frame.","code":""},{"path":"/reference/combinevarpred.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine varpred objects — combinevarpred","title":"Combine varpred objects — combinevarpred","text":"Combines plots comparison plots two named varpred objects.","code":""},{"path":"/reference/combinevarpred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine varpred objects — combinevarpred","text":"","code":"combinevarpred(   vlist,   lnames = NULL,   plotit = FALSE,   addmarginals = FALSE,   margindex,   ... )"},{"path":"/reference/combinevarpred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine varpred objects — combinevarpred","text":"vlist list varpred objects. lnames character vector specifying name(s) vlist objects. Useful faceted comparison needed. See examples. plotit logical. TRUE plot returned, otherwise varpred object. addmarginals logical. TRUE mean estimates added plot. margindex integer vector indexing vlist. Useful particular vlist needs averaged together addmarginals. ... additional arguments passed plot.varpred.","code":""},{"path":"/reference/combinevarpred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine varpred objects — combinevarpred","text":"varpred object plot.","code":""},{"path":[]},{"path":"/reference/combinevarpred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine varpred objects — combinevarpred","text":"","code":"# Set theme for ggplot. Comment out if not needed varpredtheme() set.seed(911) # Simulate binary outcome data with two predictors steps <- 500 N <- 100 b0 <- 2 b_age <- -1.5 b_income <- 1.8 min_age <- 18 age <- min_age + rnorm(N, 0, 1) min_income <- 15 income <- min_income + rnorm(N, 0, 1) eta <- b0 + age*b_age + income*b_income status <- rbinom(N, 1, plogis(eta)) df <- data.frame(status, age, income)  # Fit model mod <- glm(status ~ age + income, df, family=binomial())  # Effect plots ## Mean-based ef_mean <- varpred(mod, \"age\", steps=steps, bias.adjust=\"none\", modelname=\"mean-based\") ## Observed-value-based ef_observed <- varpred(mod, \"age\", steps=steps, bias.adjust=\"observed\", modelname=\"observed-value\") ## Combine all the effect estimates ef <- combinevarpred(list(ef_mean, ef_observed)) plot(ef)   # Prediction plots ## Mean-based pred_mean <- varpred(mod, \"age\", isolate=FALSE, steps=steps, bias.adjust=\"none\", modelname=\"mean-based\") ## Observed-value-based pred_observed <- varpred(mod, \"age\", isolate=FALSE, steps=steps, bias.adjust=\"observed\", modelname=\"observed-value\") ## Combine all the prediction estimates ### With plotit=TRUE no need to plot pred <- combinevarpred(list(pred_mean, pred_observed), plotit=TRUE) print(pred)"},{"path":"/reference/data.frame.varpred.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce varpred object to data.frame — data.frame.varpred","title":"Coerce varpred object to data.frame — data.frame.varpred","text":"Coerce varpred object data.frame","code":""},{"path":"/reference/data.frame.varpred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce varpred object to data.frame — data.frame.varpred","text":"","code":"# S3 method for varpred data.frame(x, ...)"},{"path":"/reference/data.frame.varpred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce varpred object to data.frame — data.frame.varpred","text":"x varpred object. ... additional aurguments passed data.frame.","code":""},{"path":"/reference/getmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Get focal and prediction means for a varpred object — getmeans","title":"Get focal and prediction means for a varpred object — getmeans","text":"Get focal prediction means varpred object","code":""},{"path":"/reference/getmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get focal and prediction means for a varpred object — getmeans","text":"","code":"getmeans(object, what = c(\"estimate\", \"focal\"), focal = NULL, modelname = NULL)"},{"path":"/reference/getmeans.varpred.html","id":null,"dir":"Reference","previous_headings":"","what":"Varpred means — getmeans.varpred","title":"Varpred means — getmeans.varpred","text":"Compute mean central estimates focal predictor","code":""},{"path":"/reference/getmeans.varpred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Varpred means — getmeans.varpred","text":"","code":"# S3 method for varpred getmeans(   object,   what = c(\"both\", \"estimate\", \"focal\"),   focal = NULL,   modelname = NULL )"},{"path":"/reference/getmeans.varpred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Varpred means — getmeans.varpred","text":"object varpred object. character specifying mean compute. \"estimate\", mean central estimate computed, \"focal\" mean focal predictor, otherwise, computed. focal character specifying name focal predictor. NULL (default), x.var object used. modelname character string naming varpred objects. Useful comparing several objects.","code":""},{"path":"/reference/getmeans.varpred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Varpred means — getmeans.varpred","text":"data frame.","code":""},{"path":"/reference/getmeans.varpred.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Varpred means — getmeans.varpred","text":"Provides quick way compare observed data marginal means central estimate. Current version ignores interactions averages fit column .","code":""},{"path":"/reference/getmeans.varpred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Varpred means — getmeans.varpred","text":"","code":"library(varpred) library(ggplot2) ## Set theme for plots varpredtheme() ## Fit the model mod <- lm(mpg ~ wt + hp, mtcars) ## Effect ef <- varpred(mod, \"wt\") head(ef, 3) #>         wt      fit        se      lwr      upr #> 1 1.513000 26.69942 1.0742217 24.50239 28.89645 #> 2 1.638571 26.21247 0.9947684 24.17794 28.24700 #> 3 1.856429 25.36766 0.8569229 23.61506 27.12026 tail(ef, 3) #>          wt      fit           se       lwr      upr #> 27 5.334821 11.87904 1.343973e+00  9.130309 14.62777 #> 28 5.424000 11.53322 1.400399e+00  8.669084 14.39736 #> 29 3.210747 20.11584 1.404951e-15 20.115841 20.11584  ## Compute means of the predictions ef_m <- getmeans(ef, what=\"both\", modelname=\"estimated\") print(ef_m) #>         wt      fit     model #> 1 3.210747 20.11584 estimated # Data mean mpg_m <- mean(mtcars$mpg) print(mpg_m) #> [1] 20.09062"},{"path":"/reference/head.varpred.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the First or Last Part of a varpred object — head.varpred","title":"Return the First or Last Part of a varpred object — head.varpred","text":"Return First Last Part varpred object","code":""},{"path":"/reference/head.varpred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the First or Last Part of a varpred object — head.varpred","text":"","code":"# S3 method for varpred head(x, ...)"},{"path":"/reference/head.varpred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the First or Last Part of a varpred object — head.varpred","text":"x varpred object. ... additional aurguments passed head.","code":""},{"path":"/reference/pkgsExport.html","id":null,"dir":"Reference","previous_headings":"","what":"Import and export various functions from various packages — pkgsExport","title":"Import and export various functions from various packages — pkgsExport","text":"Import export various functions various packages Import export fixef. See fixef","code":""},{"path":"/reference/plot.vareffects.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot  predictions — plot.vareffects","title":"Plot  predictions — plot.vareffects","text":"Plots estimated conditional marginal predictions.","code":""},{"path":"/reference/plot.vareffects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot  predictions — plot.vareffects","text":"","code":"# S3 method for vareffects plot(   x,   ...,   xlabs = NULL,   ylabs = NULL,   xtrans_fun = NULL,   pos = 0.5,   ci = TRUE,   facet_scales = \"fixed\",   facet_ncol = NULL )"},{"path":"/reference/plot.vareffects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot  predictions — plot.vareffects","text":"x varpred object ... future implementations xlabs x-axis label. NULL, default, x.var used. ylabs y-axis label. NULL, default, response label used. xtrans_fun function transform x values original scales. Useful x transformed prior model fitting. pos spacing labels categorical variable plot.","code":""},{"path":"/reference/plot.vareffects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot  predictions — plot.vareffects","text":"ggplot object.","code":""},{"path":[]},{"path":"/reference/plot.vareffects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot  predictions — plot.vareffects","text":"","code":"set.seed(4567) x <- rnorm(100, 3, 5) y <- 0.4 + 0.7*x + rnorm(100) df <- data.frame(y = y, x = x) m1 <- lm(y ~ x, df)  pred1 <- varpred(m1, \"x\") plot(pred1) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/plot.varpred.html","id":null,"dir":"Reference","previous_headings":"","what":"Outcome plots — plot.varpred","title":"Outcome plots — plot.varpred","text":"Plot varpred object.","code":""},{"path":"/reference/plot.varpred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Outcome plots — plot.varpred","text":"","code":"# S3 method for varpred plot(   x,   ...,   xlabs = NULL,   ylabs = NULL,   xtrans_fun = NULL,   pos = 0.5,   ci = TRUE,   facet_scales = \"fixed\",   facet_ncol = NULL )"},{"path":"/reference/plot.varpred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Outcome plots — plot.varpred","text":"x varpred object. ... future implementations. xlabs x-axis label. NULL, default, x.var used. ylabs y-axis label. NULL, default, response label used. xtrans_fun function transform x values original scales. Useful x transformed prior model fitting. See examples. pos spacing labels categorical variable plot. ci logical. TRUE (default), confidence intervals (indicating prediction effect) plotted, otherwise, central estimate plotted. facet_scales scales fixed (\"fixed\", default), free (\"free\"), free one dimension (\"free_x\", \"free_y\")? facet_ncol number facet columns.","code":""},{"path":"/reference/plot.varpred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Outcome plots — plot.varpred","text":"ggplot object.","code":""},{"path":[]},{"path":"/reference/plot.varpred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Outcome plots — plot.varpred","text":"","code":"set.seed(4567) N <- 100 x <- rnorm(N, 3, 5) y <- 5 + 0.2*x + rnorm(N) df <- data.frame(y = y, x = x) m1 <- lm(y ~ x, df) pred1 <- varpred(m1, \"x\", modelname=\"original\") plot(pred1)   ## We can transform the predictor, fit the model and then ## back-transform the predictions in the plot backtfun <- function(x, m, s) {   x <- m + x*s   return(x) } x_scaled <- scale(df$x) m <- attr(x_scaled, \"scaled:center\") s <- attr(x_scaled, \"scaled:scale\") df$x <- as.vector(x_scaled) m2 <- lm(y ~ x, df) pred2 <- varpred(m2, \"x\", modelname=\"scaled\") # Compare the predictions combinevarpred(list(pred1, pred2), plotit=TRUE)   # Display focal predictor on the original scale plot(pred2, xtrans_fun=function(x)backtfun(x, m=m, s=s))"},{"path":"/reference/print.varpred.html","id":null,"dir":"Reference","previous_headings":"","what":"Print varpred objects — print.varpred","title":"Print varpred objects — print.varpred","text":"Print varpred objects","code":""},{"path":"/reference/print.varpred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print varpred objects — print.varpred","text":"","code":"# S3 method for varpred print(x, ...)"},{"path":"/reference/print.varpred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print varpred objects — print.varpred","text":"x varpred object. ... additional aurguments passed print.","code":""},{"path":"/reference/recoverdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Recover data from the data from the model — recoverdata","title":"Recover data from the data from the model — recoverdata","text":"Reconstructs data fitted model environment.","code":""},{"path":"/reference/recoverdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recover data from the data from the model — recoverdata","text":"","code":"recoverdata(mod, extras = NULL, envir = environment(formula(mod)), ...)"},{"path":"/reference/recoverdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recover data from the data from the model — recoverdata","text":"mod fitted model envir data environment ... future implementations optional character vector formula specifying predictors. Important transformation applied formula.","code":""},{"path":"/reference/recoverdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recover data from the data from the model — recoverdata","text":"dataframe","code":""},{"path":"/reference/recoverdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recover data from the data from the model — recoverdata","text":"uses fitted model global environment reconstruct data used model. data option specified model formula, dataframe columns corresponding variable formula returned. transformation, e.g. log specified formula terms evaluated returned data frame. However, none provided model input, dataframe constructed formula terms transformations evaluated.","code":""},{"path":"/reference/recoverdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recover data from the data from the model — recoverdata","text":"","code":"set.seed(4567) x <- rnorm(100, 3, 5) y <- 0.4 + 0.7*x + rnorm(100) df <- data.frame(y = y, x = x) m1 <- lm(y ~ x, df) d1 <- recoverdata(m1) head(d1) #>            y          x #> 1  0.2230063 -0.6791249 #> 2 -1.9167764 -1.5127303 #> 3  1.6205969  4.2620757 #> 4  3.7020609  6.0751293 #> 5  8.4265286  9.7726720 #> 6  8.4632857 11.0115927 m2 <- lm(y ~ x) d2 <- recoverdata(m2) head(d2) #>            y          x #> 1  0.2230063 -0.6791249 #> 2 -1.9167764 -1.5127303 #> 3  1.6205969  4.2620757 #> 4  3.7020609  6.0751293 #> 5  8.4265286  9.7726720 #> 6  8.4632857 11.0115927"},{"path":"/reference/tail.varpred.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the First or Last Part of a varpred object — tail.varpred","title":"Return the First or Last Part of a varpred object — tail.varpred","text":"Return First Last Part varpred object","code":""},{"path":"/reference/tail.varpred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the First or Last Part of a varpred object — tail.varpred","text":"","code":"# S3 method for varpred tail(x, ...)"},{"path":"/reference/tail.varpred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the First or Last Part of a varpred object — tail.varpred","text":"x varpred object. ... additional aurguments passed tail.","code":""},{"path":"/reference/varefftheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Customized theme for vareffects plots — varefftheme","title":"Customized theme for vareffects plots — varefftheme","text":"Sets theme vareffects ggplot objects","code":""},{"path":"/reference/varefftheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customized theme for vareffects plots — varefftheme","text":"","code":"varefftheme(type = c(\"minimal\", \"complete\"))"},{"path":"/reference/varefftheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Customized theme for vareffects plots — varefftheme","text":"","code":"library(ggplot2) varefftheme() set.seed(4567) x <- rnorm(100, 3, 5) y <- 0.4 + 0.7*x + rnorm(100) df <- data.frame(y = y, x = x) m1 <- lm(y ~ x, df)  pred1 <- varpred(m1, \"x\") plot(pred1)"},{"path":"/reference/varpred.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction and effect estimates — varpred","title":"Prediction and effect estimates — varpred","text":"Computes central estimates, prediction effect estimates particular focal predictor.","code":""},{"path":"/reference/varpred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction and effect estimates — varpred","text":"","code":"varpred(   mod,   focal_predictors,   x.var = NULL,   type = c(\"response\", \"link\"),   isolate = TRUE,   isolate.value = NULL,   level = 0.95,   steps = 100,   at = list(),   dfspec = 100,   true.beta = NULL,   vcov. = NULL,   internal = FALSE,   avefun = mean,   offset = NULL,   bias.adjust = c(\"none\", \"taylor\", \"observed\"),   sigma = NULL,   include.re = FALSE,   modelname = NULL,   returnall = FALSE )"},{"path":"/reference/varpred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction and effect estimates — varpred","text":"mod fitted model object. See details supported class models. focal_predictors character vector one predictors. model interaction, interacting variables specified vector,  example ~x1*x2 c(\"x1\", \"x2\"). interactions present model, specifying vector variables compares predictions . x.var character specifying predictor define x variable (horizontal axis plot). default NULL, first predictor focal_predictors used. Ignored single focal_predictors. type character specifying desired prediction. type = \"response\" applies inverse transformation link functions, exists. type = \"link\" requests results linear predictor. isolate logical. TRUE (default), computes effect estimates otherwise computes prediction estimates. See details. isolate.value numeric (default isolate.value = NULL). isolate = TRUE, otherwise ignored, value use anchor. default value, computed internally, average linear predictor(s) corresponding focal predictors. level desired confidence interval computing confidence intervals. Default 0.95. steps number points evaluate numerical predictors focal_predictors. default 100. Increase smooth curves. Unique levels focal_predictors used case categorical predictors. default NULL. Otherwise, named list specifying points evaluate focal_predictors. names list match names used focal_predictors. NULL, levels internally generated using quantile, see quantile. dfspec default 100. Specified degrees freedom model return df. used computation confidence intervals. true.beta default NULL. specified, used model coefficient estimates order vector coefficients model object. Useful comparing model estimates \"truth\" (simulation values). vcov. function matrix. function, used compute variance-covariance matrix model coefficients. function take model first (maybe ) argument. matrix variance-covariance matrix estimated coefficient can also used. Otherwise vcov(mod) used internally. Customized vcov. can used generate effect estimates columns corresponding non-focal predictors zero. However, approach, predictors properly scaled. See examples. internal logical. TRUE, entries non-focal predictor (see x.var) variance-covariance matrix internally zeroed-using zero_vcov. Default FALSE. avefun averaging scheme (function) used generating reference point non-focal predictors. Default mean. offset function value. bias.adjust specifies bias correction method. \"none\" (default), bias correction method applied; \"taylor\", second-order Taylor approximation used; \"observed\", values non-focal predictors used. See details examples. sigma standard deviation used bias.adjust=\"taylor\". NULL (default), sigma VarCorr used. include.re logical. Default FALSE. TRUE, random effects components mixed models included. modelname character string naming varpred objects. Useful comparing several objects. returnall logical. TRUE, named computed quantities also returned.","code":""},{"path":"/reference/varpred.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prediction and effect estimates — varpred","text":"central estimates (often called effect prediction) describe fitted model responds changes focal predictor. associated quantities prediction effect estimates: prediction estimates: incorporate sources uncertainty model. Important goal prediction. effect estimates: incorporate uncertainty due focal predictor . Focus visualizing effect focal predictor. default approaches compute quantities involves averaging non-focal linear predictors (columns model.matrix corresponding non-focal predictors) -- mean-based approach. alternative observed-value-based approach computes estimates entire population non-focal predictors averages levels focal predictors. later approach appropriate model involving non-linear link function non-focal predictors /random effects. See vignette(\"vapred_intro\", package=\"varpred\")) details. current version supports: lm glm lme4 glmmTMB rstanarm objects.","code":""},{"path":[]},{"path":"/reference/varpred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction and effect estimates — varpred","text":"","code":"# Set theme for ggplot. Comment out if not needed varpredtheme() set.seed(911) # Simulate binary outcome data with two predictors steps <- 500 N <- 100 b0 <- 2 b_age <- -1.5 b_income <- 1.8 min_age <- 18 age <- min_age + rnorm(N, 0, 1) min_income <- 15 income <- min_income + rnorm(N, 0, 1) eta <- b0 + age*b_age + income*b_income status <- rbinom(N, 1, plogis(eta)) df <- data.frame(status, age, income)  # Fit model mod <- glm(status ~ age + income, df, family=binomial())  # Effect plots ## Mean-based ef_mean <- varpred(mod, \"age\", steps=steps, bias.adjust=\"none\", modelname=\"mean-based\") ## Observed-value-based ef_observed <- varpred(mod, \"age\", steps=steps, bias.adjust=\"observed\", modelname=\"observed-value\") ## Combine all the effect estimates ef <- combinevarpred(list(ef_mean, ef_observed)) plot(ef)   # Prediction plots ## Mean-based pred_mean <- varpred(mod, \"age\", isolate=FALSE, steps=steps, bias.adjust=\"none\", modelname=\"mean-based\") ## Observed-value-based pred_observed <- varpred(mod, \"age\", isolate=FALSE, steps=steps, bias.adjust=\"observed\", modelname=\"observed-value\") ## Combine all the prediction estimates ### With plotit=TRUE no need to plot pred <- combinevarpred(list(pred_mean, pred_observed), plotit=TRUE) print(pred)"},{"path":"/reference/varpredtheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Customized theme for varpred plots — varpredtheme","title":"Customized theme for varpred plots — varpredtheme","text":"Sets theme varpred ggplot objects","code":""},{"path":"/reference/varpredtheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customized theme for varpred plots — varpredtheme","text":"","code":"varpredtheme(type = c(\"minimal\", \"complete\"))"},{"path":"/reference/varpredtheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Customized theme for varpred plots — varpredtheme","text":"","code":"library(ggplot2) varpredtheme() set.seed(4567) x <- rnorm(100, 3, 5) y <- 0.4 + 0.7*x + rnorm(100) df <- data.frame(y = y, x = x) m1 <- lm(y ~ x, df)  pred1 <- varpred(m1, \"x\") plot(pred1)"},{"path":"/reference/zero_vcov.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-out entries of non-focal entries of variance-covariance matrix. — zero_vcov","title":"Zero-out entries of non-focal entries of variance-covariance matrix. — zero_vcov","text":"Transforms entries variance-covariance coefficients corresponding non-focal variables zero.","code":""},{"path":"/reference/zero_vcov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-out entries of non-focal entries of variance-covariance matrix. — zero_vcov","text":"","code":"zero_vcov(m, focal_vars, complete)"},{"path":"/reference/zero_vcov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-out entries of non-focal entries of variance-covariance matrix. — zero_vcov","text":"focal_vars character vector specifying variable(s) appearing right side formula fitted model. entries variable non-zero. complete logical indicating full variance-covariance matrix returned. mod fitted model object full variance-covariance matrix terms appearing way appear coefficients.","code":""},{"path":"/reference/zero_vcov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-out entries of non-focal entries of variance-covariance matrix. — zero_vcov","text":"variance-covariance matrix estimated parameters non-zero entry corresponding focal variable.","code":""},{"path":"/reference/zero_vcov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-out entries of non-focal entries of variance-covariance matrix. — zero_vcov","text":"","code":"set.seed(4567) x <- rnorm(100, 3, 5) y <- 0.4 + 0.7*x + rnorm(100) df <- data.frame(y = y, x = x) m1 <- lm(y ~ x, df) print(zero_vcov(m1, \"x\")) #>             (Intercept)            x #> (Intercept)           0 0.0000000000 #> x                     0 0.0004842308"},{"path":"/news/index.html","id":"varpred-0009000","dir":"Changelog","previous_headings":"","what":"varpred 0.0.0.9000","title":"varpred 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
